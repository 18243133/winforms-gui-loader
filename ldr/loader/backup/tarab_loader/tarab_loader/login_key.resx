<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAQIAAAECCAYAAAAVT9lQAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAL
        EgAACxIB0t1+/AAADexJREFUeF7t3U9uFFvSxmFk/liWLEsIISEEopEQIwY9Z3LH3gGzHnoJDO+MHbAD
        dsAOmN5Bix2wgkbqQQ/d+foqylHJsXFV5ckT58Tvkx59zcWUy1kn3sqMOhm+N/3fH5M/AaT1r8m9P09O
        Ti6fPHkCIJmzs7PL+/fv//sqCPQf3r59CyCZFy9eEARAdgQBAIIAAEEAYEIQACAIABAEACYEAQCCAABB
        AGBCEAAgCAAQBAAmBAEAggAAQQBgQhAAIAgAEAQAJgQBAIIAAEEAYEIQACAIABAEACYEAQCCAABBAGBC
        EAAgCAAQBAAmBAEAggAAQQBgQhAAIAgAEAQAJgQBAIIAAEEAYEIQACAIABAEACYEAQCCAABBAGBCEADO
        mzdvropCnj17dqmakJOTkyvHx8eXU61cef36dfExekQQIIVScZ+enm4K3Ir7rvRvS9+nVwQBumXF/fz5
        801xn52dbYr76OioWMRL0PctPadeEQQI5dWrV5sCt+J+/PjxprgfPnxYLMwlvX///sr5+fnlx48fr+jP
        9vd6DqXn3jOCANXpWtqK++nTp02K+927d5sCt+L+9OnT5devX698//798ufPnzd6+fLl5rH0M5R+zp4R
        BNiLb6pZcYsVt2+q1aLitOK+uLjYubjvSo/lv69+9tIx6RlBgI2bOuaHNNV2pWv8eXGLFfe3b9+KxVrT
        hw8ftp5f6dj1jiBIwIr7pqaaLfJafHGrqKy4v3z5sinwUgFG8OPHj62fRcexdIx7RxB0qtRUW6tjbqy4
        fVPt8+fP4Yt7F7rUsJ93xCahIQgCidAxLzXVfHHrHbJUMKMavUloCILKSh1zseJeo6l2aMc8Kx0bfxxH
        bBIagmAPv2uqteqYixV3i6baaDI0CQ1B4NxW3GKLopbfNdUo7vVkaRKatEGg03QVd6umWg8d88yyNAlN
        2iA4NABKxZ25qTaaLE1CkzIIdOpvL7JHUw2iszW/LkZuEpqUQeCv99VoKy0G5KWzPFsfozcJTbog0Md5
        9iIL7/LwtB78+lCBlNbRaNIFgRLeXmRdApQWA/LS5aCtjwxNQpMqCHSt55uEau6VFgPyytYkNKmCwDcJ
        9YKXFgL2p2Dtea+DbxLqDSNDk9CkCgK/40+ngKXFgP2pydbzvoiMTUKTJgj0g9qLLDQJl2VNtl6DYN4k
        1A1gpXU0qjRB4JuESv7SYsD+bCee/n/p76PzTUKdOZbW0MhSBIGu9exFlp5PX6PSZiwd214vuXyTUL2k
        0joaWYogUPfXXmSahMtTg9COb49BkLlJaFIEgR/o0eupa2TanWnHV3dNlr4mssxNQjN8EGhOn73Iws1A
        y/On1b1t0sreJDTDB4HmCdiL3OO7VXTzG3R6C4LsTUIzdBDM7ytgsMfy/BQf6a0Hk71JaIYOAv089iKr
        q11aCNifLrP8x7Km9LUR0SS8NnQQcF9BXTqmdny90tdGRJPw2rBB4O8r0ItMk3B5vpC8Ho41TcJtwwYB
        w0fqmheSP/vqYcOW/8gzc5PQDBkESnd7kUWLtrQYsD8/3FOF5IO3hyDwvY3MTUIzZBD4F5nhI3XYlmKx
        idD2ZzXhSv8mCt/byN4kNMMFgV5UmoR1+S3Foo9p9avZ7M/RtxnrzcGea/YmoRkuCBg+Up+/vtaGLR13
        rR37b5GDgCZh2XBB4O8raL0g1T3X9fISSo/fSmkTjg8C/b3edQ/hf9PTkvTY9jx1OTNfP1kNFQT6YexF
        HkmkM5ubNuHM7+noAU3Ca0MFgW8SjiTSIBW/pdhfX/cWwgoxv3ayGyYI9M7kX+godPq5D9/w1CltqSjX
        Nt9SrLMAf/y1mJaiTyK0Hmvxzx2DnRGMxA9ajdIj8B+7ZZr5nwFBEJQVnETZEOW3FOvjwtLzRp8IgoD8
        zkidipeKcm187DY2giAgvxdCH3eVCnNt8y3FpeeNfhEEAUXcpTffUlx63ugXQRCQPjWwoouwb39+WaAt
        xaXnjX4RBAH5oovQKCxtKcZYCIJgIjYKmes3PoIgmGiNQu1hsOfDLbvjIgiCidYovGlLMcZCEAQTrVF4
        05ZijIUgCMaKTlo3CueTfErPF2MgCAKJ1ihkS3EeBEEgkRqFutPQnouwpXhsBEEgOv5WeK1HsPstxdxp
        OD6CIBDfKGw9dJUtxbkQBIH4YSQtf2ErW4rzIQiCmP/m5lKBrsVvKdZZSun5YiwEQRB++GfrRiFbivMh
        CILQsbfia9ko9FuKhS3FORAEQURpFLKlOCeCIIgojUK2FOdEEAQQpVHIluK8CIIAojQK2VKcF0EQgI67
        FWCrRiFbinMjCAKI0CiMvqVYC1U7HNXDYG/D8giCAHyjsNVvNYq0pdgXvf+NT4bLluURBI3Nf2djqUhr
        a7mlWJcgtxV9CVuel0cQNKYXwBa43pVLhVqbRqLZc6h52q2i105FvaP7y6FdMEW5DoKgMR1zW+TazFMq
        1NpqbCk+pOj1fPQJhgJK49r837G3oQ6CoDG9w9kiV8OuVKg1afOSfX/ZZ0uxTtVVoPsUvS4J9JGpil79
        EX164Z+f39vAXIR6CILGtLhtobdoFO66pdiKXmtFRe8bnb/ji17v9HeZyejPVlif9RAEDUVoFKo47fvP
        T7vXLvq5+Q1QNAnrIQga0sG3Rd6iUTi//tbz0RrQ5couRS8qem2G0qn8UtOXuQFqPQRBQzrettBbNAr9
        luJd+KKvdYPUfKejFmrpGGIZBEFDLRuF80K7yRpFX+I/0qRJWB9B0FDLRqHvxhtdnujMRKHUaoej8U1C
        hqfWRxA00rpRqHf5KEU/N+9dMCWpPoKgER14W+itdhRG5XsXNAnXQRA0omNti71FozCq+X0P3A69DoKg
        Ef/5vRpjpaLIyDcJdRNS6dhheQRBI/5Ou2jX6C35gGSU+noIgkZssct8f31W/pMMbWiiSbgegqABHXRb
        8PqYrFQUGWnPgh0Xho+siyBoQJ+L24JXh7xUFNm0HI4CgqAJGoW/8vcV6Aan0nFDPQRBAzQKt6lHQpOw
        LYKgAVvwQqOQX6wSAUGwMh1wW/Q0Cv/mJyizBtsgCFZGo3DbfFQaTcI2CIKV0Sjc5puETChuhyBYGY3C
        a/OZCEwobocgWJlf+NkbhdF/zVomBMGKdCedLXxdIpSKIxOGj8RBEKxIn4/bwtd22lJxZKHLIjsWwn0F
        bREEK9L+eVv42RuFDB+JhSBYkf8tQBrHVSqQDOb3FWgRlo4X1kMQrMgv/qVm//fIDx+hSRgDQbASGoXX
        fJOQ+wpiIAhWQqPwb35CMcNH4iAIVhK1UajuvYpTz0kjzmv/EhM/fIQmYRwEwUpaNQq1ackXu7b0qhj9
        Vmev5m5HJhTHRRCsxBfA0o1CK3bdzqti10dz/p13FzWDQGcc9n0YPhILQbCCJRqFCg8VqbblqthV6P72
        3X2pa+9/83HNIPBnITQJYyEIVnDXRqGuz1WIdr2+VLHrRie9A+v1Fb3o/rTcX7bUCgKGj8RGEKzANwp1
        je6bcyp2/3HavlTMVuzat68X9q739q8RBD7QmFAcD0GwAl9oh9Dj6J59vU46y9CLt8THb7WDgOEj8REE
        K/DX4LfR16kodS2t10L35+sFKj3mkmoHAROK4yMIKtO7nxWBqDmnYtDpsY63XoA1iv02NYNAn2j4JiHD
        R2IiCCrTqbsOcuTPzGsGgW8Scl9BXAQBqgaBb4SyvuIiCFAtCPRY9rhCkzAuggDVgsA3CdUnKH1vxEAQ
        oEoQzCcUa6GVvjdiIAhQJQi0YcoekyZhfAQBqgQBE4r7QhBg8SDww0eE4SPxEQRYPAiYUNwfggCLBgHD
        R/pEEGDRIPBNQt3+XPp+iIcgwKJBwPCRPhEEWCwI5sNHaBL2gyDAYkHg5yQyfKQvBAEWCYJ5k5D7CvpC
        EGCRIGD4SN8IAhwcBPPhIzQJ+0MQ4OAgYEJx/wgCHBwEfkIxa6hPBAEOCgImFI+BIMBBQeCbhBq1Xnp8
        xEcQYO8gmA8fYUJxvwgC7B0E+j2M9u8YPtI3ggB7BwHDR8ZBEGCvINDX2b8R7ivoG0GAvYKACcVjIQiw
        cxDM7yvQIio9LvpBEGDnIGBC8XgIAuwcBL5JyH0FYyAIsFMQ+AnFDB8ZB0GAnYLADx+hSTgOggB3DgIm
        FI+LIMCdg+Di4mLzdfo3pcdCnwgC3DkIGD4yLoIAdwoCho+MjSDAnYKACcVjIwjw2yBg+Mj4CAL8NgiY
        UDw+ggC3BsF8QjHDR8ZEEODWIPBNQu4rGBdBgFuDwN9XwPoYF0GAG4NA/9v+u9AkHBdBgBuDgOEjeRAE
        KAbBfEKxFkrp32IMBAGKQcCE4lwIAhSDgAnFuRAE+CUI/PARYfjI+AgC/BIE5+fnmz/TJMyBIMBWEPgN
        RMLwkRwIAmwFgb/L8Pj4uPj1GA9BgK0g8Bg+kgdBgGIQMKE4F4IAxSBg+EguBAGKQcB9BbkQBPglCPTn
        0tdhXAQBfgkCmoT5EATYCgImFOdEEGArCFgDOREE2AoCmoQ5EQTYBMHp6Wnx7zE+ggCbIGBCcV4EAa6C
        gOEjuREEuAoCXvvcCAJcBQH3FeRGEIDeAAgCAAQBgAlBAIAgAEAQAJgQBAAIAgAEAYAJQQCAIABAEACY
        EAQACAIABAGACUEAgCAAQBAAmBAEAAgCAAQBgAlBAIAgAEAQAJgQBAAIAgAEAYAJQQCAIABAEACYEAQA
        CAIAsyB48ODB/46Pj/8DIJdHjx799+jo6C8FwT8mfwDI6t4//w9b4/Ce09vgUAAAAABJRU5ErkJggg==
</value>
  </data>
</root>